// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Category {
  STOCK
  INTEREST_RATE
  CURRENCY
  COMMODITY
}

enum Rank {
  WOOD
  COPPER
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum IRCategories {
  T_30
  T_20
  T_10
  T_5
  T_1
  T_OVERNIGHT
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  username  String    @unique
  password  String?
  avatar    String?
  moto      String?
  rank      Rank      @default(WOOD)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?
  isActive  Boolean   @default(true)
  deletedAt DateTime?
  results   Result[]
}

model Dates {
  id            String              @id @default(uuid())
  date          DateTime            @unique
  stockPrices   StockPrice[]
  interestRates InterestRatePrice[]
  currencies    CurrencyValue[]
  commodities   CommodityPrice[]
  results       Result[]

  @@index([date])
}

model Stock {
  id     String       @id @default(uuid())
  name   String       @unique
  market String?
  prices StockPrice[]
}

model StockPrice {
  id      String   @id @default(uuid())
  stockId String
  price   Decimal  @db.Decimal(10, 2)
  dateId  String
  stock   Stock    @relation(fields: [stockId], references: [id])
  date    Dates    @relation(fields: [dateId], references: [id])
  results Result[]
}

model InterestRate {
  id       String              @id @default(uuid())
  catagory IRCategories        @unique
  rates    InterestRatePrice[]
  Result   Result[]
}

model InterestRatePrice {
  id         String       @id @default(uuid())
  interestId String
  rate       Decimal      @db.Decimal(5, 2)
  dateId     String
  interest   InterestRate @relation(fields: [interestId], references: [id])
  date       Dates        @relation(fields: [dateId], references: [id])
}

model Currency {
  id     String          @id @default(uuid())
  name   String          @unique
  values CurrencyValue[]
}

model CurrencyValue {
  id         String   @id @default(uuid())
  currencyId String
  value      Decimal  @db.Decimal(10, 4)
  dateId     String
  currency   Currency @relation(fields: [currencyId], references: [id])
  date       Dates    @relation(fields: [dateId], references: [id])
  Result     Result[]
}

model Commodity {
  id     String           @id @default(uuid())
  name   String           @unique
  prices CommodityPrice[]
}

model CommodityPrice {
  id          String    @id @default(uuid())
  commodityId String
  price       Decimal   @db.Decimal(10, 2)
  dateId      String
  commodity   Commodity @relation(fields: [commodityId], references: [id])
  date        Dates     @relation(fields: [dateId], references: [id])
  Result      Result[]
}

model Result {
  id       String   @id @default(uuid())
  userId   String
  dateId   String
  category Category
  guess    Decimal  @db.Decimal(10, 2)
  correct  Boolean
  tries    Int
  user     User     @relation(fields: [userId], references: [id])
  date     Dates    @relation(fields: [dateId], references: [id])

  // References to specific data points for each type of guess
  stockPriceId     String?
  interestRateId   String?
  currencyValueId  String?
  commodityPriceId String?

  stockPrice     StockPrice?     @relation(fields: [stockPriceId], references: [id])
  interestRate   InterestRate?   @relation(fields: [interestRateId], references: [id])
  currencyValue  CurrencyValue?  @relation(fields: [currencyValueId], references: [id])
  commodityPrice CommodityPrice? @relation(fields: [commodityPriceId], references: [id])
}
