generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Category {
  STOCK
  INTEREST_RATE
  CURRENCY
}

enum Rank {
  WOOD
  COPPER
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum IRCategories {
  T_30
  T_20
  T_10
  T_5
  T_1
  T_OVERNIGHT
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  username   String?   @unique
  password   String
  emailToken String?
  avatar     String?
  moto       String?
  rank       Rank      @default(WOOD)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastLogin  DateTime?
  isActive   Boolean   @default(true)
  deletedAt  DateTime?
  results    Result[]
}

//rename //date //uniuqe ip /date
// IP address is unique for each guest subtable for every date
model Guest {
  id        String      @id @default(uuid())
  ip        String      @unique
  createdAt DateTime    @default(now())
  lastPlay  DateTime?
  plays     GuestPlay[]
  results   Result[]
}

model GuestPlay {
  id        String   @id @default(uuid())
  guestId   String
  playedAt  DateTime @default(now())
  completed Boolean  @default(false)
  guest     Guest    @relation(fields: [guestId], references: [id])

  @@unique([guestId, playedAt])
}

model DailyChallenge {
  id              String            @id @default(uuid())
  challengeDate   DateTime          @unique @db.Date
  dateId          String
  date            Dates             @relation(fields: [dateId], references: [id])
  interestRateId  String
  interestRate    InterestRatePrice @relation(fields: [interestRateId], references: [id])
  stockPriceId    String?
  stockPrice      StockPrice?       @relation(fields: [stockPriceId], references: [id])
  currencyValueId String?
  currencyValue   CurrencyValue?    @relation(fields: [currencyValueId], references: [id])

  @@index([challengeDate])
}

// daily challenge share table?
model Dates {
  id             String              @id @default(uuid())
  date           DateTime            @unique
  stockPrices    StockPrice[]
  interestRates  InterestRatePrice[]
  currencies     CurrencyValue[]
  DailyChallenge DailyChallenge[]

  @@index([date])
}

model Stock {
  id     String       @id @default(uuid())
  name   String       @unique
  market String?
  prices StockPrice[]
}

model StockPrice {
  id             String           @id @default(uuid())
  stockId        String
  price          Decimal          @db.Decimal(10, 2)
  dateId         String
  stock          Stock            @relation(fields: [stockId], references: [id])
  date           Dates            @relation(fields: [dateId], references: [id])
  DailyChallenge DailyChallenge[]
}

model InterestRate {
  id       String              @id @default(uuid())
  category IRCategories
  rates    InterestRatePrice[]
}

model InterestRatePrice {
  id             String           @id @default(uuid())
  interestId     String
  rate           Decimal          @db.Decimal(5, 2)
  dateId         String
  rateType       InterestRate     @relation(fields: [interestId], references: [id])
  date           Dates            @relation(fields: [dateId], references: [id])
  DailyChallenge DailyChallenge[]
}

model Currency {
  id     String          @id @default(uuid())
  name   String          @unique
  values CurrencyValue[]
}

model CurrencyValue {
  id             String           @id @default(uuid())
  currencyId     String
  value          Decimal          @db.Decimal(10, 4)
  dateId         String
  currency       Currency         @relation(fields: [currencyId], references: [id])
  date           Dates            @relation(fields: [dateId], references: [id])
  DailyChallenge DailyChallenge[]
}

model Result {
  id         String           @id @default(uuid())
  userId     String?
  guestId    String?
  date       DateTime         @db.Date
  user       User?            @relation(fields: [userId], references: [id])
  guest      Guest?           @relation(fields: [guestId], references: [id])
  categories ResultCategory[]

  @@unique([guestId, date])
  @@unique([userId, date])
  @@index([userId, date])
  @@index([guestId, date])
}

model ResultCategory {
  id        String    @id @default(uuid())
  resultId  String
  category  Category
  guess     Decimal   @db.Decimal(10, 2)
  correct   Boolean   @default(false)
  tries     Int
  startTime DateTime  @default(now())
  completed Boolean   @default(false)
  endTime   DateTime?
  timeTaken Int?
  result    Result    @relation(fields: [resultId], references: [id])

  @@unique([resultId, category])
}
